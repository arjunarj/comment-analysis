# -*- coding: utf-8 -*-
"""Copy of Emotion-detection-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fS3obd3LNq0-6Xhui_pci6VOGQChqD9Q

### End 2 End NLP Project
+ Emotion Detection In Text 
+ Text Classifier
"""

# Load EDA Pkgs
import pandas as pd
import numpy as np
import pickle

# Load Dataset
df = pd.read_csv("dataset/Reddit_Data.csv",encoding = 'ISO-8859-1')

# Load Text Cleaning Pkgs
# import neattext.functions as nfx

# # Data Cleaning
# # User handles
# df['Clean_Text'] = df['Caption'].apply(nfx.remove_userhandles)

# # Stopwords
# df['Clean_Text'] = df['Clean_Text'].apply(nfx.remove_stopwords)

# Load ML Pkgs
# Estimators
def train():
    from sklearn.linear_model import LogisticRegression
    from sklearn.naive_bayes import MultinomialNB

    # Transformers
    from sklearn.feature_extraction.text import CountVectorizer
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import accuracy_score,classification_report,confusion_matrix

    # print(df.head())
    # Features & Labels
    Xfeatures = df['Clean_Text'].fillna(' ')
    ylabels = df['LABEL']

    #  Split Data
    x_train,x_test,y_train,y_test = train_test_split(Xfeatures,ylabels,test_size=0.3)

    # Build Pipeline
    from sklearn.pipeline import Pipeline

    # LogisticRegression Pipeline
    pipe_lr = Pipeline(steps=[('cv',CountVectorizer()),('lr',LogisticRegression(max_iter=500))])

    # Train and Fit Data
    pipe_lr.fit(x_train,y_train)

    # Check Accuracy

    print(f"Model trained with accuracy of {pipe_lr.score(x_test,y_test)}")
    return pipe_lr

# save model

def predcit(value):
    try:
        with open("model.pickle","rb") as f:
            print("Using pre trained model...")
    except :
        print("Training model...")
        pickle.dump(train(), open("model.pickle","wb"))
    model = pickle.load(open("model.pickle","rb"))
    result = model.predict([value])
    # print
    return result[0]

if __name__ == "__main__":
    
    sample = input("Enter your comment: ")
    print(f"Result: {predcit(sample)}")
